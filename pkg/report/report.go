// Package report defines a report structure that can serialised and deserialised
// from the queue.
package report

import (
	"strconv"
	"time"
)

const markdownCodeDelimiter = "```"

type (
	// Report is a report generated by the github checker rules engine
	Report struct {
		Generated time.Time `json:"generated"`
		Summary   Summary   `json:"summary"`
	}

	// Summary is a headline summary of numbers such as total users in the
	// organisation, and those that have passed/failed rules checks
	Summary struct {
		TotalUsers             int `json:"total_users"`
		UsersMissingMFA        int `json:"missing_mfa"`
		AdminUsers             int `json:"admin_users"`
		AdminUsersFailingRules int `json:"admin_users_failing"`
	}
)

// New returns an empty report initialised with the generated timestamp
func New() *Report {
	return &Report{Generated: time.Now()}
}

// SummaryMarkdown returns a basic markdown formatted version of the report.
// Note for Slack: Annoyingly Slack doesn't support markdown tables so this is
// less well formatted than we'd like to make it pretty.
func (r Report) SummaryTableMarkdown() string {
	return markdownCodeDelimiter +
		"Total Users       : " + strconv.Itoa(r.Summary.TotalUsers) +
		"\nUsers without MFA : " + strconv.Itoa(r.Summary.UsersMissingMFA) +
		"\nAdmin Users       : " + strconv.Itoa(r.Summary.AdminUsers) +
		"\nBad admin users   : " + strconv.Itoa(r.Summary.AdminUsersFailingRules) +
		markdownCodeDelimiter
}
